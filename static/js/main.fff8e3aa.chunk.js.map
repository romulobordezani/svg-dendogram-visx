{"version":3,"sources":["components/cockpit/utils/LinkControls.tsx","components/cockpit/data/index.ts","components/cockpit/index.tsx","components/cockpit/utils/useForceUpdate.tsx","components/cockpit/utils/getBoundaries.ts","components/cockpit/utils/getLinkComponent.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["controlStyles","fontSize","LinkControls","layout","orientation","linkType","stepPercent","setLayout","setOrientation","setLinkType","setStepPercent","style","onClick","e","stopPropagation","onChange","target","value","disabled","type","min","max","step","Number","data","name","amount","initial","final","range","Date","percentage","children","CockPit","totalWidth","width","totalHeight","height","margin","top","left","right","bottom","useState","forceUpdate","setValue","useForceUpdate","innerWidth","innerHeight","origin","sizeWidth","sizeHeight","x","y","Math","PI","getBoundaries","LinkComponent","LinkRadialStep","LinkRadialCurve","LinkRadialLine","LinkRadial","LinkVerticalStep","LinkVerticalCurve","LinkVerticalLine","LinkVertical","LinkHorizontalStep","LinkHorizontalCurve","LinkHorizontalLine","LinkHorizontal","getLinkComponent","ScaleSVG","Group","Tree","root","hierarchy","d","isExpanded","size","separation","a","b","parent","depth","tree","links","map","link","i","percent","stroke","strokeWidth","fill","descendants","node","key","isRoot","pointRadial","radialX","console","log","repositioningCoords","rx","transform","Text","fontWeight","getFullYear","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.fff8e3aa.chunk.js","sourcesContent":["import React from 'react';\n\nconst controlStyles = { fontSize: 10 };\n\ntype Props = {\n    layout: string;\n    orientation: string;\n    linkType: string;\n    stepPercent: number;\n    setLayout: (layout: string) => void;\n    setOrientation: (orientation: string) => void;\n    setLinkType: (linkType: string) => void;\n    setStepPercent: (percent: number) => void;\n};\n\nexport default function LinkControls({\n     layout,\n     orientation,\n     linkType,\n     stepPercent,\n     setLayout,\n     setOrientation,\n     setLinkType,\n     setStepPercent,\n }: Props) {\n    return (\n        <div style={controlStyles}>\n            <label>layout:</label>&nbsp;\n            <select\n                onClick={e => e.stopPropagation()}\n                onChange={e => setLayout(e.target.value)}\n                value={layout}\n            >\n                <option value=\"cartesian\">cartesian</option>\n                <option value=\"polar\">polar</option>\n            </select>\n            &nbsp;&nbsp;\n            <label>orientation:</label>&nbsp;\n            <select\n                onClick={e => e.stopPropagation()}\n                onChange={e => setOrientation(e.target.value)}\n                value={orientation}\n                disabled={layout === 'polar'}\n            >\n                <option value=\"vertical\">vertical</option>\n                <option value=\"horizontal\">horizontal</option>\n            </select>\n            &nbsp;&nbsp;\n            <label>link:</label>&nbsp;\n            <select\n                onClick={e => e.stopPropagation()}\n                onChange={e => setLinkType(e.target.value)}\n                value={linkType}\n            >\n                <option value=\"diagonal\">diagonal</option>\n                <option value=\"step\">step</option>\n                <option value=\"curve\">curve</option>\n                <option value=\"line\">line</option>\n            </select>\n            {linkType === 'step' && layout !== 'polar' && (\n                <>\n                    &nbsp;&nbsp;\n                    <label>step:</label>&nbsp;\n                    <input\n                        onClick={e => e.stopPropagation()}\n                        type=\"range\"\n                        min={0}\n                        max={1}\n                        step={0.1}\n                        onChange={e => setStepPercent(Number(e.target.value))}\n                        value={stepPercent}\n                        disabled={linkType !== 'step' || layout === 'polar'}\n                    />\n                </>\n            )}\n        </div>\n    );\n}\n","import { TreeNode } from '../../../types/TreeNode';\n\nexport const data: TreeNode = {\n    name: 'Total',\n    amount: {\n        initial: 1000001,\n        final: 20000002\n    },\n    range: {\n        initial: new Date('2019-01-02'),\n        final: new Date('2020-01-02'),\n    },\n    percentage: 10,\n    children: [\n        {\n            name: 'Loja',\n            amount: {\n              initial: 3000003,\n              final: 400000044\n            },\n            range: {\n                initial: new Date('2019-01-02'),\n                final: new Date('2020-01-02'),\n            },\n            percentage: -20,\n            children: [\n                {\n                    name: 'Boticario',\n                    amount: {\n                        initial: 5000005,\n                        final: 60000006\n                    },\n                    range: {\n                        initial: new Date('2019-01-02'),\n                        final: new Date('2020-01-02'),\n                    },\n                    percentage: -30,\n                },\n                {\n                    name: 'Quem Disse Berenice',\n                    amount: {\n                        initial: 7000007,\n                        final: 80000008\n                    },\n                    range: {\n                        initial: new Date('2019-01-02'),\n                        final: new Date('2020-01-02'),\n                    },\n                    percentage: -40,\n                },\n                {\n                    name: 'O.U.I',\n                    amount: {\n                        initial: 9000009,\n                        final: 1000000001\n                    },\n                    range: {\n                        initial: new Date('2019-01-02'),\n                        final: new Date('2020-01-02'),\n                    },\n                    percentage: 50,\n                },\n            ],\n        },\n        {\n            name: 'Venda Direta',\n            amount: {\n                initial: 2000002,\n                final: 301233400\n            },\n            range: {\n                initial: new Date('2019-01-02'),\n                final: new Date('2020-01-02'),\n            },\n            percentage: -60,\n        },\n    ],\n};","import React, { useState } from 'react';\nimport { Group } from '@visx/group';\nimport { hierarchy, Tree } from '@visx/hierarchy';\nimport { ScaleSVG } from '@visx/responsive';\nimport { Text } from '@visx/text';\nimport { pointRadial } from 'd3-shape';\nimport useForceUpdate from './utils/useForceUpdate';\nimport LinkControls from './utils/LinkControls';\nimport getLinkComponent from './utils/getLinkComponent';\nimport { data } from './data';\nimport {getBoundaries} from './utils/getBoundaries';\n\nexport type LinkTypesProps = {\n    width: number;\n    height: number;\n    margin?: { top: number; right: number; bottom: number; left: number };\n};\n\nexport default function CockPit({\n    width: totalWidth,\n    height: totalHeight,\n    margin = { top: 30, left: 30, right: 30, bottom: 70 },\n}: LinkTypesProps) {\n    const [layout, setLayout] = useState<string>('cartesian');\n    const [orientation, setOrientation] = useState<string>('vertical');\n    const [linkType, setLinkType] = useState<string>('step');\n    const [stepPercent, setStepPercent] = useState<number>(0.5);\n    const forceUpdate = useForceUpdate();\n    const innerWidth = totalWidth - margin.left - margin.right;\n    const innerHeight = totalHeight - margin.top - margin.bottom;\n    const { origin, sizeWidth, sizeHeight } = getBoundaries(layout, orientation, innerWidth, innerHeight);\n    const LinkComponent = getLinkComponent({ layout, linkType, orientation });\n\n    return totalWidth < 10 ? null : (\n        <div>\n            <LinkControls\n                layout={layout}\n                orientation={orientation}\n                linkType={linkType}\n                stepPercent={stepPercent}\n                setLayout={setLayout}\n                setOrientation={setOrientation}\n                setLinkType={setLinkType}\n                setStepPercent={setStepPercent}\n            />\n            <ScaleSVG width={totalWidth} height={totalHeight}>\n                <Group top={margin.top} left={margin.left}>\n                    <Tree\n                        root={hierarchy(data, d => (d.isExpanded ? null : d.children))}\n                        size={[sizeWidth, sizeHeight]}\n                        separation={(a, b) => (a.parent === b.parent ? 1 : 0.5) / a.depth}\n                    >\n                        {tree => (\n                            <Group top={origin.y} left={origin.x}>\n                                {tree.links().map((link, i) => (\n                                    <LinkComponent\n                                        key={i}\n                                        data={link}\n                                        percent={stepPercent}\n                                        stroke=\"rgb(0,0,0,0.6)\"\n                                        strokeWidth=\"1\"\n                                        fill=\"none\"\n                                    />\n                                ))}\n\n                                {tree.descendants().map((node, key) => {\n                                    const width = 200;\n                                    const height = 120;\n                                    const isRoot = node.depth === 0;\n\n                                    let top: number;\n                                    let left: number;\n                                    if (layout === 'polar') {\n                                        const [radialX, radialY] = pointRadial(node.x, node.y);\n                                        top = radialY;\n                                        left = radialX;\n                                    } else if (isRoot) {\n                                        console.log('isRoot')\n                                        top = node.y + height / 2;\n                                        left = node.x;\n                                    } else if (orientation === 'vertical') {\n                                        top = node.y;\n                                        left = node.x;\n                                    } else {\n                                        top = node.x;\n                                        left = node.y;\n                                    }\n\n                                    const repositioningCoords = {\n                                        y: -height / 2,\n                                        x: -width / 2\n                                    }\n\n                                    return (\n                                        <Group top={top} left={left} key={key} >\n                                            <rect\n                                                width={width}\n                                                height={height}\n                                                {...repositioningCoords}\n                                                style={{ fill: '#FFFFFF', stroke: '#CCC' }}\n                                                rx={node.data.children ? 0 : 10}\n                                                onClick={() => {\n                                                    node.data.isExpanded = !node.data.isExpanded;\n                                                    console.log(node);\n                                                    forceUpdate();\n                                                }}\n                                            />\n                                            <Group transform=\"translate(-100 -60) scale(0.66 0.66)\">\n                                                <Text transform=\"translate(19.1 29.21)\" fontSize={20} fontWeight={800}>\n                                                    {node.data.name}\n                                                </Text>\n                                                <path\n                                                    d=\"M354.06,196.22a11.11,11.11,0,1,0,11.1,11.11A11.1,11.1,0,0,0,354.06,196.22Zm-.19,19.43a1.86,1.86,0,0,1,0-3.72,1.86,1.86,0,0,1,0,3.72Zm.69-5.88h-1.75c-.58-3.4,3.74-4.36,3.74-6.81,0-1.29-.91-2.3-2.64-2.3A4.41,4.41,0,0,0,350.8,202L349.62,201A6,6,0,0,1,354,199c2.67,0,4.46,1.47,4.46,3.74C358.49,206,354.15,206.68,354.56,209.77Z\"\n                                                    transform=\"translate(-83.17 -181.74)\"\n                                                    style={{ fill:'#030202'}}\n                                                />\n                                                <path\n                                                    d=\"M121.46,226.22a15,15,0,1,0,15,15A15,15,0,0,0,121.46,226.22Zm.18,25.6-6.49-11.24h4.34v-8.74h4v8.74h4.64Z\"\n                                                    transform={`translate(-83.17 -181.74) ${node.data.percentage > 0 ? 'rotate(-180 122 241)' : ''}`}\n                                                    style={{ fill: node.data.percentage > 0 ? 'green' : 'red' }}\n                                                />\n                                                <Text transform=\"translate(62.85 64.75)\" fontSize={24} fontWeight={400} y={3} >\n                                                    {`${node.data.percentage}%`}\n                                                </Text>\n                                                <text transform=\"translate(19.1 131.86)\" >{node.data.range.initial.getFullYear()}</text>\n                                                <text transform=\"translate(166.19 128.6)\" >{node.data.range.final.getFullYear()}</text>\n                                                <Text transform=\"translate(19.1 154.67)\" fontWeight={800} >{`R$ ${node.data.amount.initial}`}</Text>\n                                                <Text transform=\"translate(166.19 152.06)\" fontWeight={800} >{`R$ ${node.data.amount.final}`}</Text>\n                                            </Group>\n                                        </Group>\n                                    );\n                                })}\n                            </Group>\n                        )}\n                    </Tree>\n                </Group>\n            </ScaleSVG>\n        </div>\n    );\n}\n","import { useState } from 'react';\n\nexport default function useForceUpdate() {\n    const [, setValue] = useState<number>(0);\n    return () => setValue(value => value + 1); // update state to force render\n}\n","export const getBoundaries = (\n    layout: string,\n    orientation: string,\n    innerWidth: number,\n    innerHeight: number\n) => {\n    let origin: { x: number; y: number };\n    let sizeWidth: number;\n    let sizeHeight: number;\n\n    if (layout === 'polar') {\n        origin = {\n            x: innerWidth / 2,\n            y: innerHeight / 2,\n        };\n        sizeWidth = 2 * Math.PI;\n        sizeHeight = Math.min(innerWidth, innerHeight) / 2;\n    } else {\n        origin = { x: 0, y: 0 };\n        if (orientation === 'vertical') {\n            sizeWidth = innerWidth;\n            sizeHeight = innerHeight;\n        } else {\n            sizeWidth = innerHeight;\n            sizeHeight = innerWidth;\n        }\n    }\n\n    return {\n        origin,\n        sizeHeight,\n        sizeWidth\n    }\n}","import {\n    LinkHorizontal,\n    LinkVertical,\n    LinkRadial,\n    LinkHorizontalStep,\n    LinkVerticalStep,\n    LinkRadialStep,\n    LinkHorizontalCurve,\n    LinkVerticalCurve,\n    LinkRadialCurve,\n    LinkHorizontalLine,\n    LinkVerticalLine,\n    LinkRadialLine,\n} from '@visx/shape';\n\nexport default function getLinkComponent({\n     layout,\n     linkType,\n     orientation,\n }: {\n    layout: string;\n    linkType: string;\n    orientation: string;\n}): React.ComponentType<any> {\n    let LinkComponent: React.ComponentType<any>;\n\n    if (layout === 'polar') {\n        if (linkType === 'step') {\n            LinkComponent = LinkRadialStep;\n        } else if (linkType === 'curve') {\n            LinkComponent = LinkRadialCurve;\n        } else if (linkType === 'line') {\n            LinkComponent = LinkRadialLine;\n        } else {\n            LinkComponent = LinkRadial;\n        }\n    } else if (orientation === 'vertical') {\n        if (linkType === 'step') {\n            LinkComponent = LinkVerticalStep;\n        } else if (linkType === 'curve') {\n            LinkComponent = LinkVerticalCurve;\n        } else if (linkType === 'line') {\n            LinkComponent = LinkVerticalLine;\n        } else {\n            LinkComponent = LinkVertical;\n        }\n    } else if (linkType === 'step') {\n        LinkComponent = LinkHorizontalStep;\n    } else if (linkType === 'curve') {\n        LinkComponent = LinkHorizontalCurve;\n    } else if (linkType === 'line') {\n        LinkComponent = LinkHorizontalLine;\n    } else {\n        LinkComponent = LinkHorizontal;\n    }\n    return LinkComponent;\n}\n","import React from 'react';\nimport './App.css';\nimport ParentSize from '@visx/responsive/lib/components/ParentSize';\nimport CockPitControlled from './components/cockpit';\n\nfunction App() {\n  return (\n      <ParentSize>{({ width, height }) => <CockPitControlled width={width} height={height} />}</ParentSize>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}